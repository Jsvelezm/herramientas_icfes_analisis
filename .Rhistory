unique_years
columnas_puntajes
data.frame(matrix(ncol = length(columnas_puntajes), nrow = length(unique_years),0),row.names = unique_years,col.names=columnas_puntajes)
# crear una tabla vacia
matrix(ncol = length(columnas_puntajes), nrow = length(unique_years),0)
# crear una tabla vacia
matrix(ncol = length(columnas_puntajes), nrow = length(unique_years),0)
matrix(ncol = length(columnas_puntajes), nrow = length(unique_years),0)
names(indices_v)
names(indices_s)
names(indices_key)
data.frame(,row.names = unique_years,col.names=columnas_puntajes)
# crear una tabla vacia
matrix(ncol = length(columnas_puntajes), nrow = length(unique_years),0)
# crear una tabla vacia
empty = matrix(ncol = length(columnas_puntajes), nrow = length(unique_years),0)
# crear una tabla vacia
matrix_empty = matrix(ncol = length(columnas_puntajes), nrow = length(unique_years),0)
data.frame(matrix_empty,row.names = unique_years,col.names=columnas_puntajes)
# crear una tabla vacia
matrix_empty = matrix(ncol = length(columnas_puntajes), nrow = length(unique_years),0)
matrix_empty
matrix_empty
unique_years
columnas_puntajes
data.frame( matrix_empty, row.names = unique_years, col.names=columnas_puntajes)
data.frame( matrix_empty, row.names = unique_years, col.names=columnas_puntajes)
for( year in unique_years){
for(materias)
}
# tabla de puntajes
puntajes_t = data.frame( matrix_empty)
colnames(puntajes_t) = columnas_puntajes
colnames(puntajes_t) = columnas_puntajes
rownames(puntajes_t) = unique_years
rownames(puntajes_t) = unique_years
setwd("~/GitHub/herramientas_icfes_analisis")
# lectura de las funciones
source('indice_global_icfes.R')
library(openxlsx)
# es la variable que identifica a los colegios
# puede ser el nombre o el codigo
var_colegio = 'COLE_NOMBRE_ESTABLECIMIENTO'
colegio_esp = 'INSTITUCION EDUCATIVA DISTRITAL JOSE RAIMUNDO SOJO'
columnas_puntajes = c("PUNT_INGLES", "PUNT_MATEMATICAS",
"PUNT_SOCIALES_CIUDADANAS",
"PUNT_C_NATURALES", "PUNT_LECTURA_CRITICA" )
annos = 'PERIODO'
# lectura de la base de datos
resultados = read.xlsx('Resultados__nicos_Saber_11_Atlantico.xlsx',
sheet='Resultados__nicos_Saber_11_2024')
length(table(resultados[var_colegio][[1]]))
col_res =  resultados[resultados[var_colegio][[1]]==colegio_esp,]
print(sum(resultados[var_colegio][[1]]==colegio_esp))
colnames(col_res)
unique_years = sort(unique(col_res[annos][[1]]))
# crear una tabla vacia
matrix_empty = matrix(ncol = length(columnas_puntajes),
nrow = length(unique_years),0)
# tabla de puntajes
puntajes_t = data.frame( matrix_empty)
colnames(puntajes_t) = columnas_puntajes
rownames(puntajes_t) = unique_years
for( year in unique_years){
for(materia in columnas_puntajes){
puntajes_t[year,materia] = calculo_indicador(col_res[col_res[annos]==year,materia])
}
for( year in unique_years){
for(materia in columnas_puntajes){
puntajes_t[year,materia] = calculo_indicador(col_res[col_res[annos]==year,materia])
}
}
for( year in unique_years){
for(materia in columnas_puntajes){
puntajes_t[year,materia] = calculo_indicador(col_res[col_res[annos]==year,materia])
}
}
das
]
for( year in unique_years){
for(materia in columnas_puntajes){
puntajes_t[year,materia] = calculo_indicador(col_res[col_res[annos]==year,materia])
}
}
nrow = length(unique_years),0)
# tabla de puntajes
puntajes_t = data.frame( matrix_empty)
colnames(puntajes_t) = columnas_puntajes
rownames(puntajes_t) = unique_years
for( year in unique_years){
for(materia in columnas_puntajes){
puntajes_t[year,materia] = calculo_indicador(col_res[col_res[annos]==year,materia])
}
}
# tabla de puntajes
puntajes_t = data.frame( matrix_empty)
colnames(puntajes_t) = columnas_puntajes
rownames(puntajes_t) = unique_years
for( year in unique_years){
for(materia in columnas_puntajes){
puntajes_t[year,materia] = calculo_indicador(col_res[col_res[annos]==year,materia])
}
}
puntajes_t[year,materia] = calculo_indicador(col_res[col_res[annos]==year,materia][[1]])
for( year in unique_years){
for(materia in columnas_puntajes){
puntajes_t[year,materia] = calculo_indicador(col_res[col_res[annos]==year,materia][[1]])
}
}
indices_v = c(col_res[col_res[annos]==year,materia][[1]])
puntajes_t[year,materia] = calculo_indicador(indices_v)
indice_v = c(NA,40,43,43,44,45,45,45,48,49,49)
calculo_indicador =  function(indice_v){
sample_size = length(indice_v)
# el numero de estudiantes que entran en el calculo
# del indice es el 80 por ciento.
n_est_ind = sample_size*0.8
n_est_ind_f = ifelse(n_est_ind<9,9,n_est_ind)
# ordenamos el indice de menor a mayor
indice_sort = indice_v[order(indice_v,decreasing = T)][0:n_est_ind_f]
# generamos un array con los numeros del 0 al 100
indices_key = c(100:0)
indices_key = as.data.frame(indices_key)
indice = as.data.frame(table(indice_sort))
#creamos una lista donde cada uno de los datos se repite la cantidad de veces
# que esta en la muestra
indices_s = merge(indices_key, indice, by.x='indices_key', by.y='indice_sort', all.x=T,sort=F)
indices_s = indices_s[order(indices_s['indices_key'],decreasing = T),]
indices_s[is.na(indices_s)] = 0
total =  sum(indices_s['Freq'])
indices_s['Frecuencia_acum'] = cumsum(indices_s['Freq'])/total
# mf es la media de las freq acumuladas descendentes
# sf es la varianza de las acum
mf = mean(indices_s['Frecuencia_acum'][[1]])
sf = var(indices_s['Frecuencia_acum'][[1]])
# formula establecida por el icfes
indice_f = mf/(1-sf)
return(indice_f)
}
calculo_indicador(indice_v )
calculo_indicador =  function(indice_v){
sample_size = length(indice_v)
# el numero de estudiantes que entran en el calculo
# del indice es el 80 por ciento.
n_est_ind = sample_size*0.8
n_est_ind_f = ifelse(n_est_ind<9,9,n_est_ind)
# ordenamos el indice de menor a mayor
indice_sort = indice_v[order(indice_v,decreasing = T)][0:n_est_ind_f]
# generamos un array con los numeros del 0 al 100
indices_key = c(100:0)
indices_key = as.data.frame(indices_key)
indice = as.data.frame(table(indice_sort))
#creamos una lista donde cada uno de los datos se repite la cantidad de veces
# que esta en la muestra
indices_s = merge(indices_key, indice, by.x='indices_key', by.y='indice_sort', all.x=T,sort=F)
indices_s = indices_s[order(indices_s['indices_key'][[1]],decreasing = T),]
indices_s[is.na(indices_s)] = 0
total =  sum(indices_s['Freq'])
indices_s['Frecuencia_acum'] = cumsum(indices_s['Freq'])/total
# mf es la media de las freq acumuladas descendentes
# sf es la varianza de las acum
mf = mean(indices_s['Frecuencia_acum'][[1]])
sf = var(indices_s['Frecuencia_acum'][[1]])
# formula establecida por el icfes
indice_f = mf/(1-sf)
return(indice_f)
}
calculo_indicador(indice_v )
# lectura de las funciones
source('indice_global_icfes.R')
puntajes_t[year,materia] = calculo_indicador(indices_v)
#creamos una lista donde cada uno de los datos se repite la cantidad de veces
# que esta en la muestra
print(indices_key, indice)
print(indice)
#creamos una lista donde cada uno de los datos se repite la cantidad de veces
# que esta en la muestra
print(indices_key)
calculo_indicador =  function(indice_v){
sample_size = length(indice_v)
# el numero de estudiantes que entran en el calculo
# del indice es el 80 por ciento.
n_est_ind = sample_size*0.8
n_est_ind_f = ifelse(n_est_ind<9,9,n_est_ind)
# ordenamos el indice de menor a mayor
indice_sort = indice_v[order(indice_v,decreasing = T)][0:n_est_ind_f]
# generamos un array con los numeros del 0 al 100
indices_key = c(100:0)
indices_key = as.data.frame(indices_key)
indice = as.data.frame(table(indice_sort))
#creamos una lista donde cada uno de los datos se repite la cantidad de veces
# que esta en la muestra
print(indices_key)
print(indice)
indices_s = merge(indices_key, indice, by.x='indices_key', by.y='indice_sort', all.x=T,sort=F)
indices_s = indices_s[order(indices_s['indices_key'][[1]],decreasing = T),]
indices_s[is.na(indices_s)] = 0
total =  sum(indices_s['Freq'])
indices_s['Frecuencia_acum'] = cumsum(indices_s['Freq'])/total
# mf es la media de las freq acumuladas descendentes
# sf es la varianza de las acum
mf = mean(indices_s['Frecuencia_acum'][[1]])
sf = var(indices_s['Frecuencia_acum'][[1]])
# formula establecida por el icfes
indice_f = mf/(1-sf)
return(indice_f)
}
calculo_indicador(indice_v )
indice_v = c(NA,40,43,43,44,45,45,45,48,49,49)
calculo_indicador(indice_v )
source("~/GitHub/herramientas_icfes_analisis/calculo_indice_global_2024.R", echo=TRUE)
for( year in unique_years){
for(materia in columnas_puntajes){
indice_v = c(col_res[col_res[annos]==year,materia][[1]])
puntajes_t[year,materia] = calculo_indicador(indice_v)
}
}
for( year in unique_years){
for(materia in columnas_puntajes){
indice_v = c(col_res[col_res[annos]==year,materia][[1]])
puntajes_t[year,materia] = calculo_indicador(indice_v)
}
}
source("~/GitHub/herramientas_icfes_analisis/calculo_indice_global_2024.R", echo=TRUE)
indice_v
year
col_res[col_res[annos]==year
col_res[col_res[annos]==year
col_res[annos]==year
col_res[annos]==year
materia
col_res[col_res[annos]==year,materia]
unique_years
for( year in unique_years){
for(materia in columnas_puntajes){
indice_v = c(col_res[col_res[annos]==year,materia][[1]])
if(~all(is.na(indice_v))){
puntajes_t[year,materia] = calculo_indicador(indice_v)
}
}
puntajes_t
is.na(indice_v)
all(is.na(indice_v))
~all(is.na(indice_v))
!all(is.na(indice_v))
for( year in unique_years){
for(materia in columnas_puntajes){
indice_v = c(col_res[col_res[annos]==year,materia][[1]])
if(!all(is.na(indice_v))){
puntajes_t[year,materia] = calculo_indicador(indice_v)
}
}
}
for( year in unique_years){
for(materia in columnas_puntajes){
indice_v = c(col_res[col_res[annos]==year,materia][[1]])
if(!all(is.na(indice_v))){
puntajes_t[year,materia] = calculo_indicador(indice_v)
}
}
}
for( year in unique_years){
for(materia in columnas_puntajes){
indice_v = c(col_res[col_res[annos]==year,materia][[1]])
if(!all(is.na(indice_v))){
puntajes_t[year,materia] = calculo_indicador(indice_v)
}
}
}
source("~/GitHub/herramientas_icfes_analisis/calculo_indice_global_2024.R", echo=TRUE)
puntajes_t
puntajes_t
puntajes_t = data.frame( matrix_empty)
colnames(puntajes_t) = columnas_puntajes
rownames(puntajes_t) = unique_years
puntajes_t
calculo_indicador(indice_v)
puntajes_t[year,materia]
puntajes_t[year,materia] = calculo_indicador(indice_v)
puntajes_t[year,materia]
puntajes_t
# tabla de puntajes
puntajes_t = data.frame( matrix_empty)
colnames(puntajes_t) = columnas_puntajes
rownames(puntajes_t) = unique_years
puntajes_t
colnames(puntajes_t)
rownames(puntajes_t)
indice_v = c(col_res[col_res[annos]==year,materia][[1]])
indice_v
indice_v = c(col_res[col_res[annos]==year,materia])
indice_v
for( year in unique_years){
for(materia in columnas_puntajes){
indice_v = c(col_res[col_res[annos]==year,materia])
if(!all(is.na(indice_v))){
puntajes_t[year,materia] = calculo_indicador(indice_v)
}
}
}
puntajes_t
indice_v = c(col_res[col_res[annos]==year,materia])
indice_v
puntajes_t[year,materia]
# tabla de puntajes
puntajes_t = data.frame( matrix_empty)
colnames(puntajes_t) = columnas_puntajes
rownames(puntajes_t) = unique_years
indice_v
calculo_indicador(indice_v)
puntajes_t[year,materia]
puntajes_t
for( year in unique_years){
for(materia in columnas_puntajes){
indice_v = c(col_res[col_res[annos]==year,materia])
if(!all(is.na(indice_v))){
puntajes_t[as.character(year),materia] = calculo_indicador(indice_v)
}
}
}
puntajes_t
ingles_col ="PUNT_INGLES"
columnas_puntajes
columnas_puntajes - 'PUNTAJE_INGLES'
columnas_puntajes_ex =  columnas_puntajes_ex[!columnas_puntajes %in% c(ingles_col)]
columnas_puntajes_ex =  columnas_puntajes[!columnas_puntajes %in% c(ingles_col)]
rowSums(puntajes_t[columnas_puntajes_ex])
rowSums(puntajes_t[columnas_puntajes_ex])*3/13
rowSums(puntajes_t[columnas_puntajes_ex]*3/13)
puntajes_t['puntaje_global'] = rowSums(puntajes_t[columnas_puntajes_ex]*3/13) + puntajes_t[ingles_col]*1/13
puntajes_t['puntaje_global']
write.xlsx('puntajes_'+ var_colegio + '.xlsx')
write.xlsx('puntajes_'+ var_colegio + '.xlsx')
source("~/GitHub/herramientas_icfes_analisis/calculo_indice_global_2024.R", echo=TRUE)
puntajes['anno'] =  rownames(puntajes_t)
puntajes_t['puntaje_global'] = rowSums(puntajes_t[columnas_puntajes_ex]*3/13) + puntajes_t[ingles_col]*1/13
puntajes_t['anno'] =  rownames(puntajes_t)
write.xlsx(puntajes_t,'puntajes_'+ var_colegio + '.xlsx')
write.xlsx(puntajes_t,paste0('puntajes_',var_colegio ,'.xlsx'))
write.xlsx(puntajes_t,paste0('puntajes_',colegio_esp ,'.xlsx'))
puntajes_t['puntaje_global']
puntajes_t['anno'] =  rownames(puntajes_t)
write.xlsx(puntajes_t,paste0('puntajes_',colegio_esp ,'.xlsx'))
source("~/GitHub/herramientas_icfes_analisis/calculo_indice_global_2024.R", echo=TRUE)
source("~/GitHub/herramientas_icfes_analisis/calculo_indice_global_2024.R", echo=TRUE)
source("~/GitHub/herramientas_icfes_analisis/calculo_indice_global_2024.R", echo=TRUE)
setwd("~/GitHub/herramientas_icfes_analisis")
colegio_esp = 'I.E.D. GERMÁN VARGAS CANTILLO'
source("~/GitHub/herramientas_icfes_analisis/calculo_indice_global_2024.R", echo=TRUE)
source("~/GitHub/herramientas_icfes_analisis/calculo_indice_global_2024.R", echo=TRUE)
source("~/GitHub/herramientas_icfes_analisis/calculo_indice_global_2024.R", echo=TRUE)
# lectura de las funciones
source('indice_global_icfes.R')
library(openxlsx)
# es la variable que identifica a los colegios
# puede ser el nombre o el codigo
var_colegio = 'COLE_NOMBRE_ESTABLECIMIENTO'
colegio_esp = 'I.E.D. GERMÁN VARGAS CANTILLO'
columnas_puntajes = c("PUNT_INGLES", "PUNT_MATEMATICAS",
"PUNT_SOCIALES_CIUDADANAS",
"PUNT_C_NATURALES", "PUNT_LECTURA_CRITICA" )
ingles_col ="PUNT_INGLES"
annos = 'PERIODO'
# lectura de la base de datos
resultados = read.xlsx('Resultados__nicos_Saber_11_Atlantico.xlsx',
sheet='Resultados__nicos_Saber_11_2024')
length(table(resultados[var_colegio][[1]]))
col_res =  resultados[resultados[var_colegio][[1]]==colegio_esp,]
print(sum(resultados[var_colegio][[1]]==colegio_esp))
colnames(col_res)
unique_years = sort(unique(col_res[annos][[1]]))
# crear una tabla vacia
matrix_empty = matrix(ncol = length(columnas_puntajes),
nrow = length(unique_years),0)
# tabla de puntajes
puntajes_t = data.frame( matrix_empty)
colnames(puntajes_t) = columnas_puntajes
rownames(puntajes_t) = unique_years
for( year in unique_years){
for(materia in columnas_puntajes){
indice_v = c(col_res[col_res[annos]==year,materia])
if(!all(is.na(indice_v))){
puntajes_t[as.character(year),materia] = calculo_indicador(indice_v)
}
}
}
columnas_puntajes_ex =  columnas_puntajes[!columnas_puntajes %in% c(ingles_col)]
puntajes_t['puntaje_global'] = rowSums(puntajes_t[columnas_puntajes_ex]*3/13) + puntajes_t[ingles_col]*1/13
puntajes_t['anno'] =  rownames(puntajes_t)
write.xlsx(puntajes_t,paste0('puntajes_',colegio_esp ,'.xlsx'))
# lectura de las funciones
source('indice_global_icfes.R')
library(openxlsx)
# es la variable que identifica a los colegios
# puede ser el nombre o el codigo
var_colegio = 'COLE_NOMBRE_ESTABLECIMIENTO'
colegio_esp = 'I.E.D. GERMÁN VARGAS CANTILLO'
columnas_puntajes = c("PUNT_INGLES", "PUNT_MATEMATICAS",
"PUNT_SOCIALES_CIUDADANAS",
"PUNT_C_NATURALES", "PUNT_LECTURA_CRITICA" )
ingles_col ="PUNT_INGLES"
annos = 'PERIODO'
# lectura de la base de datos
resultados = read.xlsx('Resultados__nicos_Saber_11_Atlantico.xlsx',
sheet='Resultados__nicos_Saber_11_2024')
length(table(resultados[var_colegio][[1]]))
col_res =  resultados[resultados[var_colegio][[1]]==colegio_esp,]
print(sum(resultados[var_colegio][[1]]==colegio_esp))
colnames(col_res)
unique_years = sort(unique(col_res[annos][[1]]))
# crear una tabla vacia
matrix_empty = matrix(ncol = length(columnas_puntajes),
nrow = length(unique_years),0)
# tabla de puntajes
puntajes_t = data.frame( matrix_empty)
colnames(puntajes_t) = columnas_puntajes
rownames(puntajes_t) = unique_years
for( year in unique_years){
for(materia in columnas_puntajes){
indice_v = c(col_res[col_res[annos]==year,materia])
if(!all(is.na(indice_v))){
puntajes_t[as.character(year),materia] = calculo_indicador(indice_v)
}
}
}
columnas_puntajes_ex =  columnas_puntajes[!columnas_puntajes %in% c(ingles_col)]
puntajes_t['puntaje_global'] = rowSums(puntajes_t[columnas_puntajes_ex]*3/13) + puntajes_t[ingles_col]*1/13
puntajes_t['anno'] =  rownames(puntajes_t)
write.xlsx(puntajes_t,paste0('puntajes_',colegio_esp ,'.xlsx'))
source("~/GitHub/herramientas_icfes_analisis/calculo_indice_global_2024.R", echo=TRUE)
# lectura de las funciones
source('indice_global_icfes.R')
library(openxlsx)
# es la variable que identifica a los colegios
# puede ser el nombre o el codigo
var_colegio = 'COLE_NOMBRE_ESTABLECIMIENTO'
colegio_esp = 'I.E.D. GERMÁN VARGAS CANTILLO'
columnas_puntajes = c("PUNT_INGLES", "PUNT_MATEMATICAS",
"PUNT_SOCIALES_CIUDADANAS",
"PUNT_C_NATURALES", "PUNT_LECTURA_CRITICA" )
ingles_col ="PUNT_INGLES"
annos = 'PERIODO'
# lectura de la base de datos
resultados = read.xlsx('Resultados__nicos_Saber_11_Atlantico.xlsx',
sheet='Resultados__nicos_Saber_11_2024')
length(table(resultados[var_colegio][[1]]))
col_res =  resultados[resultados[var_colegio][[1]]==colegio_esp,]
print(sum(resultados[var_colegio][[1]]==colegio_esp))
colnames(col_res)
unique_years = sort(unique(col_res[annos][[1]]))
# crear una tabla vacia
matrix_empty = matrix(ncol = length(columnas_puntajes),
nrow = length(unique_years),0)
# tabla de puntajes
puntajes_t = data.frame( matrix_empty)
colnames(puntajes_t) = columnas_puntajes
rownames(puntajes_t) = unique_years
for( year in unique_years){
for(materia in columnas_puntajes){
indice_v = c(col_res[col_res[annos]==year,materia])
if(!all(is.na(indice_v))){
puntajes_t[as.character(year),materia] = calculo_indicador(indice_v)
}
}
}
columnas_puntajes_ex =  columnas_puntajes[!columnas_puntajes %in% c(ingles_col)]
puntajes_t['puntaje_global'] = rowSums(puntajes_t[columnas_puntajes_ex]*3/13) + puntajes_t[ingles_col]*1/13
puntajes_t['anno'] =  rownames(puntajes_t)
write.xlsx(puntajes_t,paste0('puntajes_',colegio_esp ,'.xlsx'))
setwd("~/GitHub/herramientas_icfes_analisis")
# lectura de las funciones
source('indice_global_icfes.R')
library(openxlsx)
# es la variable que identifica a los colegios
# puede ser el nombre o el codigo
var_colegio = 'COLE_NOMBRE_ESTABLECIMIENTO'
colegio_esp = 'I.E.D. GERMÁN VARGAS CANTILLO'
columnas_puntajes = c("PUNT_INGLES", "PUNT_MATEMATICAS",
"PUNT_SOCIALES_CIUDADANAS",
"PUNT_C_NATURALES", "PUNT_LECTURA_CRITICA" )
ingles_col ="PUNT_INGLES"
annos = 'PERIODO'
# lectura de la base de datos
resultados = read.xlsx('Resultados__nicos_Saber_11_Atlantico.xlsx',
sheet='Resultados__nicos_Saber_11_2024')
length(table(resultados[var_colegio][[1]]))
col_res =  resultados[resultados[var_colegio][[1]]==colegio_esp,]
print(sum(resultados[var_colegio][[1]]==colegio_esp))
colnames(col_res)
unique_years = sort(unique(col_res[annos][[1]]))
# crear una tabla vacia
matrix_empty = matrix(ncol = length(columnas_puntajes),
nrow = length(unique_years),0)
# tabla de puntajes
puntajes_t = data.frame( matrix_empty)
colnames(puntajes_t) = columnas_puntajes
rownames(puntajes_t) = unique_years
for( year in unique_years){
for(materia in columnas_puntajes){
indice_v = c(col_res[col_res[annos]==year,materia])
if(!all(is.na(indice_v))){
puntajes_t[as.character(year),materia] = calculo_indicador(indice_v)
}
}
}
columnas_puntajes_ex =  columnas_puntajes[!columnas_puntajes %in% c(ingles_col)]
puntajes_t['puntaje_global'] = rowSums(puntajes_t[columnas_puntajes_ex]*3/13) + puntajes_t[ingles_col]*1/13
puntajes_t['anno'] =  rownames(puntajes_t)
write.xlsx(puntajes_t,paste0('puntajes_',colegio_esp ,'.xlsx'))
source("~/GitHub/herramientas_icfes_analisis/calculo_indice_global_2024.R", echo=TRUE)
source("~/GitHub/herramientas_icfes_analisis/calculo_indice_global_2024.R", echo=TRUE)
source("~/GitHub/herramientas_icfes_analisis/calculo_indice_global_2024.R", echo=TRUE)
